import json
import os
import pathlib
import threading
import requests
from enum import Enum
from typing import Optional, Any, Callable

from android_utils import log, run_on_ui_thread
from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import get_last_fragment
from ui.alert import AlertDialogBuilder
from ui.bulletin import BulletinHelper
from ui.settings import Selector, Input, Divider, Header

from java.io import File
from java.util import ArrayList

from com.exteragram.messenger.plugins import PluginsController
from com.exteragram.messenger.plugins.ui import PluginSettingsActivity

from org.telegram.messenger import ApplicationLoader, R

__id__ = "reswag"
__name__ = "reSwaga"
__description__ = "свага💤"
__icon__ = "remusic/0"
__version__ = "1.0.0"
__author__ = "@reNightly, @qmrrchh"
__min_version__ = "11.12.1"

RESOURCE_DIR_NAME = "resources"
RESOURCES = [
    "strings-ru.json",
    "strings-en.json",
]
DOWNLOAD_URL = "https://raw.githubusercontent.com/cherryymerryy/reSwaga/main/"

REMOTE_CONFIG_URL = DOWNLOAD_URL + "config.json"
REMOTE_CONFIG = {}


def logcat(message):
    log(f"[{__id__}] {message}")


def show_error(message: str, on_click: Optional[Callable] = None, button_text: str = ""):
    if on_click is None:
        BulletinHelper.show_error(f"[{__name__}] {message}")
    elif on_click is not None and button_text != "":
        BulletinHelper.show_with_button(f"[{__name__}] {message}", R.raw.error, button_text, lambda: on_click())
    else:
        BulletinHelper.show_error(f"[{__name__}] {message}")


def show_info(message: str, on_click: Optional[Callable] = None, button_text: str = ""):
    if on_click is None:
        BulletinHelper.show_info(f"[{__name__}] {message}")
    elif on_click is not None and button_text != "":
        BulletinHelper.show_with_button(f"[{__name__}] {message}", R.raw.info, button_text, lambda: on_click())
    else:
        BulletinHelper.show_error(f"[{__name__}] {message}")


def _get_temp_dir() -> Optional[File]:
    try:
        base_dir = ApplicationLoader.getFilesDirFixed()
        if not base_dir:
            return None
        temp_dir = File(base_dir.getAbsolutePath(), f"plugins/{RESOURCE_DIR_NAME}")
        if not temp_dir.exists() and not temp_dir.mkdirs():
            return None
        return temp_dir
    except Exception as e:
        logcat(f"Error getting/creating temp directory: {e}")
        return None


def read_remote_config():
    global REMOTE_CONFIG, RESOURCES
    try:
        req = requests.get(REMOTE_CONFIG_URL)
        if req.status_code == 200:
            decoded_content = req.content.decode('utf-8-sig')
            REMOTE_CONFIG = json.loads(decoded_content)
            logcat(REMOTE_CONFIG)

            if REMOTE_CONFIG["resources_names"]:
                RESOURCES = REMOTE_CONFIG["resources_names"]
                logcat(RESOURCES)

            logcat("Remote config received.")
        else:
            logcat("Remote config not found.")
    except Exception as e:
        logcat(f"Failed to receive remote config: {e}")


def download_file(url: str, file_path: str):
    if url is None or url == "":
        logcat("No URL provided to download.")
        return

    if file_path is None or file_path == "":
        logcat("No file_path provided to download.")
        return

    name = url.split("/").pop()

    try:
        logcat(f"Downloading {name}...")

        response = requests.get(url, timeout=15)
        response.raise_for_status()
        content = response.content

        if content:
            with open(file_path, "wb") as f:
                f.write(content)
            logcat(f"Successfully downloaded {name}.")
        else:
            logcat(f"Downloaded empty file for {name}.")

    except requests.exceptions.HTTPError as e:
        show_error(f"Failed to download {name}. Server returned error: {e}")
        logcat(f"Failed to download {name}. Server returned error: {e}")
    except requests.exceptions.RequestException as e:
        show_error(f"Failed to download {name} due to a network error: {e}")
        logcat(f"Failed to download {name} due to a network error: {e}")
    except IOError as e:
        show_error(f"Failed to save {name}. Permission or disk error: {e}")
        logcat(f"Failed to save {name}. Permission or disk error: {e}")
    except Exception as e:
        show_error(f"An unexpected error occurred while downloading {name}: {e}")
        logcat(f"An unexpected error occurred while downloading {name}: {e}")


def _open_plugin_settings():
    try:
        java_plugin = PluginsController.getInstance().plugins.get(__id__)
        if java_plugin:
            run_on_ui_thread(lambda: get_last_fragment().presentFragment(PluginSettingsActivity(java_plugin)))
    except Exception as e:
        logcat(f"Error opening plugin settings: {e}")


class Track:
    def __init__(
            self,
            active: bool,
            track_id: int = None,
            title: str = None,
            artist: list = None,
            album: str = None,
            thumb: str = None,
            duration: int = None,
            progress: int = None,
            link: str = None,
            device: str = None,
            download_url: str = None,
    ):
        self.active = active
        self.track_id = track_id
        self.title = title
        self.artist = artist
        self.album = album
        self.thumb = thumb
        self.duration = duration
        self.progress = progress
        self.link = link
        self.device = device
        self.download_url = download_url


class Platform(Enum):
    NotSelected = 0
    Spotify = 1
    YandexMusic = 2
    SoundCloud = 3


class BasePlatform:
    def __init__(self, value: str):
        self.poller_enabled: bool = False
        self.now_track: Optional[Track] = None

        if value:
            self.value: str = value
        else:
            logcat("Value is none.")

    def get_track(self) -> Optional[Track]:
        pass

    def poller(self):
        pass

    def start_poller(self):
        if not self.poller_enabled:
            self.poller_enabled = True
            threading.Thread(target=self.poller, daemon=True).start()
        else:
            logcat("Poller already started.")

    def stop_poller(self):
        if self.poller_enabled:
            self.poller_enabled = False
        else:
            logcat("Poller not started for stopping.")


class Spotify(BasePlatform):
    def __init__(self, value: str):
        super().__init__(value)
        username = value.strip() if value else ""
        if '/' in username:
            username = username.split('/')[-1]
        self.username = username
        self.headers = {"User-Agent": "Mozilla/5.0", "Accept": "application/json"}
        self.now_track = Track(active=False)

    def get_track(self) -> Optional[Track]:
        data = requests.get(f"https://api.stats.fm/api/v1/users/{self.username}/streams/current", headers=self.headers)
        if data.status_code == 204:
            return Track(active=False)
        elif data.status_code != 200:
            return Track(active=False)
        else:
            data = data.json()['item']
            if data:
                track_id = data['track']['externalIds']['spotify']
                track_id = track_id[0] if track_id else 0
                album = self.get_album_link(data['track']['id'])
                track = Track(
                    active=True,
                    track_id=track_id,
                    title=data['track']['name'],
                    artist=[artist['name'] for artist in data['track']['artists']],
                    album=album,
                    thumb=data['track']['albums'][0]['image'],
                    duration=data['track']['durationMs'] // 1000,
                    progress=data['progressMs'] // 1000,
                    link=f"https://open.spotify.com/track/{track_id}",
                    device=data['deviceName']
                )
            else:
                track = Track(active=False)

            return track

    def get_album_link(self, internal_track_id) -> Optional[str]:
        data = requests.get(f"https://api.stats.fm/api/v1/tracks/{internal_track_id}/albums", headers=self.headers)
        if data.status_code != 200:
            return None
        else:
            data = data.json()['items']
            if data:
                try:
                    album_id = data[0]['externalIds']['spotify'][0]
                    return f"https://open.spotify.com/album/{album_id}"
                except:
                    return None
            else:
                return None


class YandexMusic(BasePlatform):
    def __init__(self, value: str):
        super().__init__(value)
        self.api_url: str = "https://track.mipoh.ru/"
        self.token = value.strip()
        self.headers = {"User-Agent": "Mozilla/5.0", "Accept": "application/json", "ya-token": self.token}

    def get_track(self) -> Optional[Track]:
        if not self.token:
            return Track(active=False)
        try:
            r = requests.get(f"{self.api_url}/get_current_track_beta", headers=self.headers, timeout=10, verify=False)
            logcat(f"[YandexMusic] get_current_track status={r.status_code}, body={r.text[:200]}")
            data = r.json()
            logcat(f"[YandexMusic] get_current_track data keys={list(data.keys())}")
            if r.status_code != 200 or 'track' not in data:
                logcat("[YandexMusic] no 'track' key or bad status")
                return Track(active=False)
            t = data['track']
            logcat(f"[YandexMusic] raw track: {t}")
            tid = t.get('track_id')
            raw_artist = t.get('artist', '')
            if isinstance(raw_artist, str):
                artists = [x.strip() for x in raw_artist.split(',') if x.strip()]
            elif isinstance(raw_artist, list):
                artists = raw_artist
            else:
                artists = []
            album = t.get('album')
            thumb = t.get('img')
            duration = int(t.get('duration', 0))
            progress_ms_raw = data.get('progress_ms', 0)
            try:
                progress_ms = int(progress_ms_raw)
            except:
                progress_ms = 0
            progress = progress_ms // 1000
            track = Track(
                active=True,
                track_id=tid,
                title=t.get('title'),
                artist=artists,
                album=album,
                thumb=thumb,
                duration=duration,
                progress=progress,
                link=f"https://music.yandex.ru/track/{tid}",
                download_url=t.get('download_link')
            )
            logcat(f"[YandexMusic] built track: {track.title} — {track.artist}, album={track.album}, duration={track.duration}, progress={track.progress}")
            return track
        except Exception as e:
            logcat(f"[YandexMusic] get_current_track exception: {e}")
            return Track(active=False)


class SoundCloud(BasePlatform):
    def __init__(self, value: str):
        super().__init__(value)
        self.api_url: str = "https://track.mipoh.ru/"
        self.token = value.strip()

    def get_track(self) -> Optional[Track]:
        return Track(active=False)


def get_platform(platform: int) -> Platform:
    if platform == 0:
        return Platform.NotSelected
    elif platform == 1:
        return Platform.Spotify
    elif platform == 2:
        return Platform.YandexMusic
    elif platform == 3:
        return Platform.SoundCloud
    else:
        return Platform.NotSelected


class ReSwagaPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        if not self.enabled: return
        self.platform: Optional[BasePlatform] = None
        self.spinner: Optional[AlertDialogBuilder] = None
        self.info: Optional[AlertDialogBuilder] = None
        self.loading: Optional[AlertDialogBuilder] = None

    def on_plugin_load(self):
        if not self.enabled: return
        self.add_on_send_message_hook()
        _get_temp_dir()
        threading.Thread(target=read_remote_config, daemon=True).start()
        self.update_platform_object(self.get_setting("selected_platform", 0), True)
        threading.Thread(target=self.check_resources).start()
        logcat(f"plugin loaded")

    def on_plugin_unload(self):
        logcat(f"plugin unloaded")

    def create_settings(self):
        selected_platform = self.get_setting("selected_platform", 0)

        settings = [
            Header("Service & Authorization"),
            Selector(
                key="selected_platform",
                text="платформа",
                items=["Не выбрано", "Spotify", "Yandex.Music", "SoundCloud"],
                default=0,
                on_change=lambda new_value: self.update_platform_object(new_value, False)
            ),
            Input(
                key="value",
                text="token",
                on_change=lambda z: self.update_platform_object(self.get_setting("selected_platform", 0), True)
            ) if selected_platform != int(Platform.NotSelected.value) else None,

            Divider(),

            Header("Resources"),
        ]

        return settings

    def on_send_message_hook(self, account: int, params: Any):
        text = params.message

        if text == ".now":
            platform = self.get_setting("selected_platform", 0)

            if platform == 0 or self.platform is None:
                BulletinHelper.show_error("You can't use command without selected platform.")
                return HookResult(strategy=HookStrategy.CANCEL)

            threading.Thread(target=self.debug_show_track, daemon=True).start()
            return HookResult(strategy=HookStrategy.CANCEL)
        else:
            return HookResult(strategy=HookStrategy.DEFAULT)

    def debug_show_track(self):
        run_on_ui_thread(lambda: self.show_spinner())

        try:
            track = self.platform.get_track()
            if track is None:
                show_error("track not found")
                return

            if not track.active:
                show_error("track not active")
                return

            show_info(f"{track.title} | {track.artist}")
        except Exception as e:
            logcat(f"debug_show_track error: {e}")

        run_on_ui_thread(lambda: self.dismiss_spinner())

    def update_platform_object(self, new_platform: int, value: bool):
        if not value:
            self.set_setting("value", "")

        token = self.get_setting("value", None)

        if new_platform == int(Platform.NotSelected.value):
            self.platform = None

        elif new_platform == int(Platform.Spotify.value):
            self.platform = Spotify(token)

        elif new_platform == int(Platform.YandexMusic.value):
            self.platform = YandexMusic(token)

        elif new_platform == int(Platform.SoundCloud.value):
            self.platform = SoundCloud(token)

        else:
            logcat(f"Unknown platform ({new_platform})")

    def check_resources(self):
        try:
            temp = _get_temp_dir()
            if not temp:
                logcat("Temp directory is none.")
                return

            files = list(temp.listFiles())

            if len(files) != len(RESOURCES):
                for f in files:
                    if f.delete():
                        logcat(f"Deleted {f.getName()}.")
                    else:
                        logcat(f"Delete failed {f.getName()}.")

                self.download_resources()
                return

        except Exception as e:
            logcat(f"check_resources error: {e}")

    def download_resources(self):
        run_on_ui_thread(lambda: self.show_loading_alert("Downloading resources..."))

        temp = _get_temp_dir()
        if not temp:
            logcat("Temp directory is none.")
            return

        progress: int = 0

        for r in RESOURCES:
            try:
                progress += 1
                run_on_ui_thread(lambda: self.update_loading_progress(progress))

                file_path = os.path.join(temp.getAbsolutePath(), r)
                url = DOWNLOAD_URL + f"resources/" + r

                download_file(url, file_path)

            except Exception as e:
                show_error(f"An unexpected error occurred while downloading {r}: {e}")
                logcat(f"An unexpected error occurred while downloading {r}: {e}")

        run_on_ui_thread(lambda: self.dismiss_loading_alert())

    def show_spinner(self):
        fragment = get_last_fragment()
        ctx = fragment.getParentActivity() if fragment else ApplicationLoader.applicationContext
        if ctx is None:
            logcat("Context not found, can't show spinner.")
            return

        self.spinner = AlertDialogBuilder(ctx, AlertDialogBuilder.ALERT_TYPE_SPINNER)
        self.spinner.set_cancelable(False)
        self.spinner.set_canceled_on_touch_outside(False)
        self.spinner.set_on_cancel_listener(None)
        self.spinner.create()
        self.spinner.show()

        if self.spinner.get_dialog() and self.spinner.get_dialog().isShowing():
            java = self.spinner.get_dialog()
            java.setCancelable(False)
            java.setCanceledOnTouchOutside(False)

    def dismiss_spinner(self):
        if self.spinner and self.spinner.get_dialog() and self.spinner.get_dialog().isShowing():
            self.spinner.dismiss()

        self.spinner = None

    def show_info_alert(self, title: str, message: str, positive_text: Optional[str] = None,
                        positive_listener: Optional[Callable] = None, neutral_text: Optional[str] = "Ok",
                        neutral_listener: Optional[Callable] = None):
        fragment = get_last_fragment()
        ctx = fragment.getParentActivity() if fragment else ApplicationLoader.applicationContext
        if ctx is None:
            logcat("Context not found, can't show info alert.")
            return

        self.info = AlertDialogBuilder(ctx, AlertDialogBuilder.ALERT_TYPE_MESSAGE)
        self.info.set_title(title)
        self.info.set_message(message)

        if positive_text:
            if positive_listener:
                self.info.set_positive_button(positive_text, lambda alert, i: positive_listener())
            else:
                self.info.set_positive_button(positive_text, lambda alert, i: self.dismiss_info_alert())

        if neutral_text:
            if neutral_listener:
                self.info.set_neutral_button(neutral_text, lambda alert, i: neutral_listener())
            else:
                self.info.set_neutral_button(neutral_text, lambda alert, i: self.dismiss_info_alert())

        self.info.show()

    def dismiss_info_alert(self):
        if self.info and self.info.get_dialog() and self.info.get_dialog().isShowing():
            self.info.dismiss()

        self.info = None

    def show_loading_alert(self, title: str):
        if title is None:
            logcat("Title is empty, can't show loading.")
            return

        fragment = get_last_fragment()
        ctx = fragment.getParentActivity() if fragment else ApplicationLoader.applicationContext
        if ctx is None:
            logcat("Context not found, can't show loading alert.")
            return

        self.loading = AlertDialogBuilder(ctx, AlertDialogBuilder.ALERT_TYPE_LOADING)
        self.loading.set_title(title)
        self.loading.set_cancelable(False)
        self.loading.set_canceled_on_touch_outside(False)
        self.loading.set_on_cancel_listener(None)
        self.loading.show()

        if self.loading.get_dialog() and self.loading.get_dialog().isShowing():
            java = self.loading.get_dialog()
            java.setCancelable(False)
            java.setCanceledOnTouchOutside(False)

        self.loading.set_progress(0)

    def update_loading_progress(self, progress: int):
        if self.loading is None or not self.loading.get_dialog().isShowing():
            logcat("Can't update loading alert, because he is None or not showing.")
            return

        self.loading.set_progress(progress)

    def dismiss_loading_alert(self):
        if self.loading and self.loading.get_dialog() and self.loading.get_dialog().isShowing():
            self.loading.dismiss()

        self.loading = None
